//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LogisticsProject.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LogisticDBEntities : DbContext
    {
        public LogisticDBEntities()
            : base("name=LogisticDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CentraLogistyczne> CentraLogistyczne { get; set; }
        public virtual DbSet<Klienci> Klienci { get; set; }
        public virtual DbSet<Ladunki> Ladunki { get; set; }
        public virtual DbSet<Naczepy> Naczepy { get; set; }
        public virtual DbSet<Pojazdy> Pojazdy { get; set; }
        public virtual DbSet<Przewoznicy> Przewoznicy { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Trasy> Trasy { get; set; }
        public virtual DbSet<Zlecenia> Zlecenia { get; set; }
        public virtual DbSet<NoweZamowienia> NoweZamowienia { get; set; }
    
        public virtual int Dodaj_Trase(Nullable<int> iDC1, Nullable<int> iDC2, Nullable<int> dlugosc, Nullable<double> oplatyDodatkowe)
        {
            var iDC1Parameter = iDC1.HasValue ?
                new ObjectParameter("IDC1", iDC1) :
                new ObjectParameter("IDC1", typeof(int));
    
            var iDC2Parameter = iDC2.HasValue ?
                new ObjectParameter("IDC2", iDC2) :
                new ObjectParameter("IDC2", typeof(int));
    
            var dlugoscParameter = dlugosc.HasValue ?
                new ObjectParameter("Dlugosc", dlugosc) :
                new ObjectParameter("Dlugosc", typeof(int));
    
            var oplatyDodatkoweParameter = oplatyDodatkowe.HasValue ?
                new ObjectParameter("OplatyDodatkowe", oplatyDodatkowe) :
                new ObjectParameter("OplatyDodatkowe", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dodaj_Trase", iDC1Parameter, iDC2Parameter, dlugoscParameter, oplatyDodatkoweParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Szczeg_Trasy_z_Kod_Result> Szczeg_Trasy_z_Kod(string kod1, string kod2)
        {
            var kod1Parameter = kod1 != null ?
                new ObjectParameter("Kod1", kod1) :
                new ObjectParameter("Kod1", typeof(string));
    
            var kod2Parameter = kod2 != null ?
                new ObjectParameter("Kod2", kod2) :
                new ObjectParameter("Kod2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Szczeg_Trasy_z_Kod_Result>("Szczeg_Trasy_z_Kod", kod1Parameter, kod2Parameter);
        }
    
        public virtual ObjectResult<Szczeg_Trasy_z_Miasto_Result> Szczeg_Trasy_z_Miasto(string miasto1, string miasto2)
        {
            var miasto1Parameter = miasto1 != null ?
                new ObjectParameter("Miasto1", miasto1) :
                new ObjectParameter("Miasto1", typeof(string));
    
            var miasto2Parameter = miasto2 != null ?
                new ObjectParameter("Miasto2", miasto2) :
                new ObjectParameter("Miasto2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Szczeg_Trasy_z_Miasto_Result>("Szczeg_Trasy_z_Miasto", miasto1Parameter, miasto2Parameter);
        }
    }
}
